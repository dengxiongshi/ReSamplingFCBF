#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
python implementation of ReSamplingFCBF(Fast Correlation-Based Filter)
FCBF algorithm from Feature Selection for High-Dimensional Data: A Fast Correlation-Based
Filter Solution. Yu & Liu (ICML 2003)

Created by Yu Jianlin
2020-05-05

"""

import numpy as np
import math

def entropy(x):
    # returns H(X)
    data_sorted, data_count = np.unique(x, return_counts=True)
    prob_x = np.array(data_count / float(sum(data_count)))
    input_entropy = prob_x.dot(-np.log2(prob_x))
    return input_entropy


def conditional_entropy(x, y):
    # returns H(X|Y)
    y_sorted, y_count = np.unique(y, return_counts=True)
    prob_y = np.array(y_count / float(sum(y_count)))
    conditional_entropy_x = np.zeros(y_sorted.shape[0])
    i = 0
    for value in y_sorted:
        cache = np.array(x[y == value])
        conditional_entropy_x[i] = entropy(cache)
        i = i + 1
#    conditional_entropy_x = np.array(entropy(x[y == value]) for value in y_sorted)
    conditional_entropy_x_y = prob_y.dot(conditional_entropy_x)
    return conditional_entropy_x_y


def mutual_information(x, y):
    # returns mutual information H(X) - H(X|Y)
    return entropy(x) - conditional_entropy(x, y)


def symmetrical_uncertainty(x, y):
    # returns symmetrical uncertainty
    return 2.0 * mutual_information(x, y) / (entropy(x) + entropy(y))


def getFirstElement(s_list):
    tran = np.where(s_list[:, 2] > 0)[0]
    if len(tran):
        return s_list[tran[0], 0], s_list[tran[0], 1], tran[0]
    return None, None, None


def getNextElement(s_list, index):
    tran = np.where(s_list[:, 2]>0)[0]
    tran = tran[tran > index]
    if len(tran):
        return s_list[tran[0], 0], s_list[tran[0], 1], tran[0]
    return None, None, None


def removeElement(s_list, index):
    s_list[index, 2] = 0
    return s_list


def class_symmetrical_uncertainty(x, y):
    # returns symmetrical uncertainty between each feature and class label Y
    class_su = np.zeros(x.shape[1])
    for i in np.arange(x.shape[1]):
        class_su[i] = symmetrical_uncertainty(x[:, i], y)
    return class_su


def sample(X, Y, sample_ratio):
    sample_size = round(sample_ratio * X.shape[0])
    X_sampled = np.zeros((sample_size, X.shape[-1]), dtype=np.int)
    Y_sampled = np.zeros(sample_size)

    for i in range(sample_size):
        sample_index = math.floor(np.random.rand() * X.shape[0])
        X_sampled[i, :] = X[sample_index, :]
        Y_sampled[i] = Y[sample_index]
    return X_sampled, Y_sampled

def fcbf(X, Y, threshold, sample_ratio, sample_times):
    """
    :param X: feature matrix, 2-d array
    :param Y: labels, 1-d array
    :param threshold: a float in [1,0), negative value means using the minimum
    SU value
    :return: an array containing SU values and feature index
    """
    # initiate s_list
    s_list = np.zeros((X.shape[1], 3))
    s_list[:, -1] = 1

    # save relevant features in descent order and remove features with su below threshold
    su_cache = np.zeros(X.shape[1])
    for i in range(sample_times):
        X_sampled, Y_sampled = sample(X, Y, sample_ratio)
        su_cache += class_symmetrical_uncertainty(X_sampled, Y_sampled)
    s_list[:, 0] = su_cache / sample_times
    index = np.argsort(s_list[:, 0])[::-1]
    s_list = s_list[index, ]
    s_list[:, 1] = index

    if threshold < 0:
        threshold = s_list[-1, 0]
        print('Input threshold < 0, using the minimum SU value as the threshold, threshold =', threshold)
    elif threshold > max(s_list[:, 0]):
        print('Threshold too large, please lower the input threshold')
        exit()

    s_list = s_list[s_list[:, 0] > threshold, :]

    #
    pool = {}
    feature_number = s_list.shape[0]
    p_su, p_feature_index, p_index = getFirstElement(s_list)

    for i in range(feature_number):
        p_feature_index = int(p_feature_index)
        q_su, q_feature_index, q_index = getNextElement(s_list, p_index)
        if q_feature_index:
            while q_feature_index:
                q_feature_index = int(q_feature_index)
                if (p_feature_index, q_feature_index) in pool:
                    pq_su = pool[(p_feature_index, q_feature_index)]
                else:
                    pq_su_cache = 0
                    for i in range(sample_times):
                        X_sampled, Y_sampled = sample(X, Y, sample_ratio)
                        pq_su_cache += symmetrical_uncertainty(X_sampled, Y_sampled)
                    pq_su = pq_su_cache / sample_times
#                   pq_su = symmetrical_uncertainty(X[:, p_feature_index], X[:, q_feature_index])
#                   pool[(p_feature_index, q_feature_index)] = pq_su

                if pq_su >= q_su:
                    s_list = removeElement(s_list, q_index)
                q_su, q_feature_index, q_index = getNextElement(s_list, q_index)

        p_su, p_feature_index, p_index = getNextElement(s_list, p_index)

        if not p_index:
            break
    s_best = s_list[s_list[:, 2] > 0, :2]
    return s_best


def fcbf_main(input_path, threshold, sample_ratio, class_loc, sample_times, delim=','):
    data = np.loadtxt(input_path, delimiter=delim, dtype=float)
    if class_loc == -1:
        X = data[:, :data.shape[1] - 1]
        Y = data[:, -1]
    else:
        index = np.arange(data.shape[1])
        X = data[:, index[index != class_loc]]
        Y = data[:, class_loc]
    s_best = fcbf(X, Y, threshold, sample_ratio, sample_times)
    print(s_best)


if __name__ == '__main__':
    fcbf_main('-path,
              threshold=0.01,
              class_loc=-1,
              sample_ratio=0.5,
              sample_times=50)
